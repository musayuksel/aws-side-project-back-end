AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Backend API with API Gateway, Lambda, and DynamoDB with CORS
Parameters:
  TableName:
    Type: String
    Description: Name of the DynamoDB table to create
    Default: musa-test-lambda-promos-table
  CodeBucket:
    Type: String
    Description: S3 bucket name where the Lambda code is stored
    Default: musa-yxl-lambda-apigateway-code
  CodeKey:
    Type: String
    Description: S3 object key for the Lambda code
    Default: lambda-functions.zip

Resources:
  # DynamoDB Table
  DynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: channel
          AttributeType: S
      KeySchema:
        - AttributeName: channel
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

        # Lamda Execution Role
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: lambda-apigateway-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaDynamoDBPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:DeleteItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:UpdateItem"
                Resource: !GetAtt DynamoDBTable.Arn
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"

  # Lambda Function to create a user
  CreateUserLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: LambdaFunctionCreateUser
      Runtime: nodejs20.x
      Handler: handlers/createUser.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: !Ref CodeKey

  # Lambda Function to get promos
  GetPromosLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: LambdaFunctionGetPromos
      Runtime: nodejs20.x
      Handler: handlers/getChannelPromos.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: !Ref CodeKey

  # API Gateway Rest API
  ConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
      - ApiGateway
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref CreateUserLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub >-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/user

  GetPromosLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
      - ApiGateway
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref GetPromosLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub >-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/promos

  ApiGatewayExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "lambda:InvokeFunction"
                Resource:
                  - !GetAtt CreateUserLambda.Arn
                  - !GetAtt GetPromosLambda.Arn

  ApiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: MockTVPromotionAPI
      EndpointConfiguration:
        Types:
          - REGIONAL
  #API Gateway Resource
  ApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: user

  ApiResourceForPromos:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: promos

    #API Gateway Method(GET) promos with CORS
  ApiGetPromosMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResourceForPromos
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPromosLambda.Arn}/invocations"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels:
            application/json: Empty

  #API Gateway Method(POST) with CORS
  ApiPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateUserLambda.Arn}/invocations"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
          ResponseModels:
            application/json: Empty

  # API Gateway Method (OPTIONS) for CORS Preflight
  ApiOptionsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode":200}'
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'http://localhost:5173'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  ApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - ApiPostMethod
      - ApiOptionsMethod
      - ApiGetPromosMethod
    Properties:
      RestApiId: !Ref ApiGateway
  ApiStage:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      RestApiId: !Ref ApiGateway
      DeploymentId: !Ref ApiDeployment
      StageName: Prod
Outputs:
  ApiEndpoint:
    Value: !Sub >-
      https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/promos
    Description: Endpoint URL of the deployed API
