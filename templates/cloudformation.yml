Resources:
  ConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "musa-website-lambda-edge-test-bucket-081224v4"
  ConfigBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ConfigBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${ConfigBucket}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"

  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: Allow CloudFront to access the bucket
        Name: AllowCloudFrontAccessToBucket
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${ConfigBucket}/*"

        - PolicyName: CloudWatchLogsPolicy # Added policy for CloudWatch Logs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

  ConfigUpdateLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-config-lambda"
      Runtime: nodejs20.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('Received event:', JSON.stringify(event, null, 2));

            // Add a custom header to the response
            const response = {
              statusCode: 200,
              headers: {
                'X-Example-Header': 'This is an example header'
              },
              body: JSON.stringify('Hello from Lambda!'),
            };

            return response;
          };

  ConfigUpdateLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref ConfigUpdateLambda

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: "musa-s3-lambda-edge-test-distribution"
        Enabled: true
        DefaultRootObject: "default-config.json"
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: true
          TargetOriginId: s3Origin
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: origin-request
              LambdaFunctionARN: !Ref ConfigUpdateLambdaVersion
        Origins:
          - Id: s3Origin
            DomainName: !GetAtt ConfigBucket.DomainName
            OriginAccessControlId: !Ref OriginAccessControl
            S3OriginConfig: {}

Outputs:
  ConfigLambdaFunction:
    Description: "Config Lambda Function ARN"
    Value: !Ref ConfigUpdateLambdaVersion

  CloudFrontDistributionDomainName:
    Description: "CloudFront Distribution Domain Name"
    Value: !GetAtt CloudFrontDistribution.DomainName
